{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"knockout.js workshop for BU camp","name":"Ko-workshop","google":"","body":"# ko workshop walktrough\r\n\r\n## Starting point\r\n\r\n\t# git clone https://github.com/marcbaechinger/ko-workshop.git\r\n\t# git checkout workshop-start\r\n\r\n### technology stack\r\n\r\n* application boilder plate based on HTML5 boilerplate\r\n* modernizer: cross-device and browser applications readiness\r\n* bootstrap: framework with css grid and css UI tool kit\r\n* jquery: DOM and browser facade; utilities\r\n* knockout.js: knockout library\r\n\r\n### base application files\r\n\r\n* index.html: contains the application markup\r\n* app.js: starts the applicaiton controller\r\n* app.css: application specific styles\r\n* src/*.js: application javascripts \r\n\r\n### Application markup\r\n\r\n* Navigation bar on top\r\n* a form element in the bootstrap grid\r\n \t* A header \r\n\t* a button bar with a button\r\n\t* a list \r\n\r\n### Application javascript\r\n\r\n* src/app/application-model.js: an observable model representing our application (view model)\r\n* src/app/application-controller.js: the controller\r\n\r\n## Observables and observable arrays\r\n\r\n* explain the ApplicationModel shortly\r\n\t* <code>ko.observable()</code>\r\n\t* <code>ko.observableArray()</code>\r\n* explain the ApplicationController shortly\r\n\t* <code>ko.applyBindings(model, contextElement)</code>\r\n\r\n\r\n# Exercises: Secure password manager\r\n\r\n## Exercise 1: observable and observableArray: create, add, delete\r\n\r\n\t# git checkout workshop-start\r\n\r\n### array template\r\n* Display all credentials in the #credential-list by using ko DOM templating\r\n* display the <code>site</code> and <code>username</code> for each item in the list\r\n\r\n### create a new credential and add to collection\r\n* add createCredential(sitename) function to the ApplicationModel\r\n* add createCredential() function to the ApplicationController\r\n\t* get sitename from user wth prompt()\r\n\t* delegate creation to the model\r\n* create bindings to new button in the markup\r\n\r\n### remove a existing credential from the list\r\n* add removeCredential(credential) function to the model\r\n\t* it simply removes the credential object passd as param from the observableArray\r\n* add a binding to the delete button\r\n\t* note that the binding is within a foreach template\r\n\t* that's why the current data item of an array is passed to a function binded within the template (cool feature!!)\r\n\t\r\nGet to this stage by git\r\n\t\r\n\t# git checkout exercise-1-end\r\n\r\n## Exercise 2: select item in list and display in edit form\r\n\r\n\t# git checkout exercise-2-start\r\n\r\n* add markup for edit form  => git tag: exercise-2-start\r\n* add an observable 'selectedCredential' to the application model\r\n* add bindings to the list item to set the selected credential\r\n* subscribe to the selection change to set focus on appropriate form field (.site)\r\n* automatically select a new item on creation and set focus to appropriate form field (.username) \r\n\r\nGet to this stage by git\r\n\r\n\t# git checkout exercise-2-end\r\n\r\n## Exercise 3: filter list entries\r\n\r\n\t# git checkout exercise-3-start\r\n\r\n* add text field to list form (below button-bar and above the list) => git tag: exercise-3-start\r\n* add a filter ko.observable() with an empty string\r\n* add a filteredCredentials as a ko.computed\r\n     * the implementation creates a filtered array of credentials and returns it\r\n* change binding foreach of the list to the filteredCredentials  \r\n* add value binding to the text field to set the filter query to the model \r\n\r\nGet to this stage by git\r\n\r\n\t# git checkout exercise-3-end\r\n\r\n## Exercise 4a: initalize model from and save to local storage\r\n\r\n\t# git checkout exercise-4-start\r\n\r\n* add markup of save button to button bar => git tag: exercise-4-start\r\n* add save function to the ApplicationModel\r\n* add load function to the ApplicationModel\r\n* remove sample data from ApplicationModel\r\n* add binding to save button to trigger save function on model\r\n* call load function of model after creation (in ApplicationContoller constructor)\r\n* add style binding to form element to show it only when a list item is selected\r\n* add keyup handler to perform save on ctrl-s\r\n\r\nGet to this stage by git\r\n\t\r\n\t# git checkout exercise-4-end\r\n\r\n## Exercise 4b: initalize model from and save to remote service\r\n tbd\r\n\r\n## Exercise 5: encrypt/decrypt passwords with sjcl \r\n\r\n\t# git checkout exercise-5-start\r\n\r\n### step 1: encrypt password when entered\r\n* markup: add markup for 'cleartext password' button below #password-field\r\n* markup: remove binding to cleartext password of #password-field\r\n* add private function getSecret() to ApplicationController\r\n \t* check for available value in private var secretKey\r\n\t* if no secretKey: ask for master key with prompt(\"\")\r\n\t\t* set secretKey\r\n\t* return secretKey\r\n* at the bottom of index.html add: &lt;script src=\"js/sjcl.js\"&gt;&lt;/script&gt;\r\n\r\n* add changePassword member function to ApplicationController\r\n\t\r\n    * get value of #password-field\r\n    * encrypt password with sjcl.encrypt(secretKey, pwd)\r\n\t* empty password field\r\n\t* set value of #password-field@placeholder to JSON.parse(pwd).iv\r\n\t* set result of encryption to the password prop of model.selectedCredential()\r\n\t* do everyting above in a try-catch block\r\n* add binding to #password-field to call changePassword() on change\r\n\r\nGet to this stage by git\r\n\r\n\t# git checkout exercise-5-step-1\r\n\r\n### step 2: show clear text password\r\n* delete all items without encrypted passwords to avoid problems\r\n* show encrypted password in placeholder attr of #password-field when selection changes (we already subscribed to this.model.selectedCredential; extend logic)\r\n* delete all list items without encrypted passwords to avoid problems\r\n* add member function showCleartextPassword to the ApplicationController\r\n\t* get pwdEncryptData from model.selectedCredential.password()\r\n\t* get secretKey from getSecret()\r\n\t* decrypt password with sjcl.decrypt(secretKey, pwdEncryptData) \r\n\t* update the text of #ct-pwd\r\n* add click binding to #ct-pwd to call showCleartextPassword()\r\n\r\nGet to this stage by git\r\n\r\n\t# git checkout exercise-5-step-2\r\n\r\n### step 3: improvements\r\n* change impl of function showCleartextPassword to erase display of cleartext password after 5 sec.\r\n* display an icon when the secretKey is stored in memory\r\n\t* add an observable to the model: this.secret = ko.observable();\r\n\t* change getSecret to read and store the secret key in the observable\r\n\t* add binding to #key to display when a model.secret is not null: data-bind=\"style: {display: secret() ? 'block' : 'none'}\"\r\n* add removeSecret function to the ApplicationController\r\n\t* unset the secret in the model\r\n* add binding to #key to call removeSecret() on click\r\n\r\nGet to this stage by git\r\n\t\r\n\t# git checkout exercise-5-end\r\n\r\n## Bugfixes\r\n* clear secret when encryption fails\r\n\r\n## optional steps (not implemented yet)\r\n\r\n* externalize and inject load/save functions of the model\r\n* when storing credentials, also store current selection and filter to resume UI when restarted\r\n* make sure that master password is never changed or migrate all encrypted parts when changing the master password"}